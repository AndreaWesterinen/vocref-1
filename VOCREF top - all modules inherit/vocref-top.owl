Prefix(:=<http://vocref.github.io/ontologies/vocref-top#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(skos:=<http://www.w3.org/2004/02/skos/core#>)


Ontology(<http://vocref.github.io/ontologies/vocref-top>
<http://vocref.github.io/ontologies/vocref-top/1.0-SNAPSHOT>
Annotation(rdfs:label "Ontology of Ontology Evaluation")
Annotation(owl:versionInfo "$Id$")
Annotation(skos:editorialNote "Structured semantic information assets (SSIAs) are the primary subject of the (VOCREF) ontology. In this context, they are viewed and described primarily as candidate assets for use or reuse.")
Annotation(rdfs:comment "This was originally developed as part of Ontology Summit 2013 Hackathon HC-05.")
Annotation(rdfs:seeAlso <http://ontolog.cim3.net/cgi-bin/wiki.pl?OntologySummit2013_Hackathon_Clinics_OntologyOfOntologyEvaluation>)

Declaration(Class(:Activity))
AnnotationAssertion(rdfs:comment :Activity "Business Process, etc.")
Declaration(Class(:Agent))
Declaration(Class(:Application))
Declaration(Class(:ApplicationType))
Declaration(Class(:Audit))
SubClassOf(:Audit :EvaluationProcess)
Declaration(Class(:AutomatedEvaluationMethod))
SubClassOf(:AutomatedEvaluationMethod :EvaluationMethod)
Declaration(Class(:BestPractice))
SubClassOf(:BestPractice :EvaluationProcess)
Declaration(Class(:CombinationAudit))
SubClassOf(:CombinationAudit :Audit)
Declaration(Class(:ConceptualOntologyRepresentation))
AnnotationAssertion(rdfs:label :ConceptualOntologyRepresentation "ontology (conceptual model)")
AnnotationAssertion(rdfs:comment :ConceptualOntologyRepresentation "A human-centric, human-understandable model of the things and relationships in a portion of the world, expressed independently of technological implementation or machine use considerations. May be textual, graphical, or captured in any other human-friendly way.")
SubClassOf(:ConceptualOntologyRepresentation :OntologyRepresentation)
Declaration(Class(:Controlled_Vocabulary))
SubClassOf(:Controlled_Vocabulary :VO)
Declaration(Class(:Dictionary))
AnnotationAssertion(:synonym :Dictionary "lexicon"@en)
SubClassOf(:Dictionary :VO)
Declaration(Class(:EvaluationEvent))
SubClassOf(:EvaluationEvent ObjectAllValuesFrom(:generates :EvaluationOutput))
SubClassOf(:EvaluationEvent ObjectAllValuesFrom(:processPartOf :EvaluationProcess))
SubClassOf(:EvaluationEvent ObjectAllValuesFrom(:utilizes :EvaluationMethod))
Declaration(Class(:EvaluationMethod))
SubClassOf(:EvaluationMethod ObjectAllValuesFrom(:implements :EvaluationMetric))
SubClassOf(:EvaluationMethod ObjectAllValuesFrom(:intendedUse :VOCharacteristic))
Declaration(Class(:EvaluationMetric))
AnnotationAssertion(rdfs:label :EvaluationMetric "ontology evaluation metric"@en)
SubClassOf(:EvaluationMetric ObjectAllValuesFrom(:providesVisibilityTo :VOCharacteristic))
Declaration(Class(:EvaluationOutput))
Declaration(Class(:EvaluationProcess))
SubClassOf(:EvaluationProcess ObjectAllValuesFrom(:requires :EvaluationOutput))
Declaration(Class(:ExtrinsicAudit))
SubClassOf(:ExtrinsicAudit :Audit)
Declaration(Class(:FormalOntology))
SubClassOf(:FormalOntology :Ontology)
Declaration(Class(:Functionality))
Declaration(Class(:InformalOntology))
SubClassOf(:InformalOntology :Ontology)
Declaration(Class(:InformationSystem))
AnnotationAssertion(rdfs:comment :InformationSystem "A complementary network of hardware, software, processes, people and/or organizations used to collect, filter, process, create, and distribute information."@en)
AnnotationAssertion(rdfs:label :InformationSystem "infomation system"@en)
Declaration(Class(:IntrinsicAudit))
SubClassOf(:IntrinsicAudit :Audit)
Declaration(Class(:LogicalOntologyRepresentation))
AnnotationAssertion(rdfs:comment :LogicalOntologyRepresentation "A representation of an ontology in a particular, logic-based ontology language, such as OWL 2, Common Logic, etc.")
AnnotationAssertion(rdfs:label :LogicalOntologyRepresentation "ontology (logical model)")
SubClassOf(:LogicalOntologyRepresentation :FormalOntology)
SubClassOf(:LogicalOntologyRepresentation :OntologyRepresentation)
SubClassOf(:LogicalOntologyRepresentation ObjectAllValuesFrom(:implements :ConceptualOntologyRepresentation))
Declaration(Class(:ManualEvaluationMethod))
SubClassOf(:ManualEvaluationMethod :EvaluationMethod)
Declaration(Class(:MaturityLevel))
AnnotationAssertion(rdfs:label :MaturityLevel "Maturity Level of Development")
AnnotationAssertion(rdfs:comment :MaturityLevel "in Conceptual and Logical Models")
Declaration(Class(:Ontology))
AnnotationAssertion(rdfs:comment :Ontology "An ontology is a living artifact that has a context and life-cycle, with which various agents may have interactions. Examples of ontologies are the Gene Ontology or OWL Time, which may have multiple representations and/or versions.")
SubClassOf(:Ontology :VO)
Declaration(Class(:OntologyLanguage))
AnnotationAssertion(rdfs:comment :OntologyLanguage "Language used to represent an ontology, e.g. OWL, Common Logic, etc. An ontology characteristic.")
Declaration(Class(:OntologyRepresentation))
SubClassOf(:OntologyRepresentation ObjectMinCardinality(0 :voCharacterization))
Declaration(Class(:OperationalEnvironment))
Declaration(Class(:Organization))
AnnotationAssertion(rdfs:comment :Organization "which creates, deploys, tests, audits, etc. the ontology")
SubClassOf(:Organization :Agent)
SubClassOf(:Organization ObjectAllValuesFrom(:evaluates ObjectUnionOf(:Ontology :EvaluationProcess)))
SubClassOf(:Organization ObjectAllValuesFrom(:invokes :EvaluationProcess))
Declaration(Class(:Person))
SubClassOf(:Person :Agent)
Declaration(Class(:QualitativeMetric))
AnnotationAssertion(rdfs:label :QualitativeMetric "qualitative ontology metric"@en)
SubClassOf(:QualitativeMetric :EvaluationMetric)
Declaration(Class(:QuantitativeMetric))
AnnotationAssertion(rdfs:label :QuantitativeMetric "quantitative ontology metric"@en)
SubClassOf(:QuantitativeMetric :EvaluationMetric)
Declaration(Class(:Scenario))
Declaration(Class(:Scope))
Declaration(Class(:SemiAutomatedEvaluationMethod))
SubClassOf(:SemiAutomatedEvaluationMethod :EvaluationMethod)
Declaration(Class(:SerializationFormat))
AnnotationAssertion(rdfs:comment :SerializationFormat "Format used to serialize a physical ontology, e.g. RDF/XML or CLIF. An ontology characteristic.")
Declaration(Class(:SerializedOntologyRepresentation))
AnnotationAssertion(rdfs:comment :SerializedOntologyRepresentation "A serialized representation of an ontology (that is, represented in a serial format such as RDF/XML or CLIF."@en)
AnnotationAssertion(rdfs:label :SerializedOntologyRepresentation "formal ontology (serialized)")
SubClassOf(:SerializedOntologyRepresentation :FormalOntology)
SubClassOf(:SerializedOntologyRepresentation :OntologyRepresentation)
SubClassOf(:SerializedOntologyRepresentation ObjectAllValuesFrom(:implements :LogicalOntologyRepresentation))
Declaration(Class(:SubjectArea))
AnnotationAssertion(rdfs:label :SubjectArea "subject area"@en)
AnnotationAssertion(rdfs:comment :SubjectArea "A domain of discourse, subject area, field of study or practice, to general topic covered by an ontology or vocabulary."@en)
AnnotationAssertion(:alternateLabel :SubjectArea "domain of discourse"@en)
Declaration(Class(:Taxonomy))
AnnotationAssertion(rdfs:label :Taxonomy "Taxonomy"@en)
SubClassOf(:Taxonomy :VO)
Declaration(Class(:Thesaurus))
SubClassOf(:Thesaurus :VO)
Declaration(Class(:UseCase))
Declaration(Class(:VO))
AnnotationAssertion(rdfs:label :VO "vocabulary or ontology"@en)
AnnotationAssertion(skos:acronym :VO "VO"@en)
AnnotationAssertion(rdfs:comment :VO "Loosely, a structured semantic information object, such as a metadata vocabulary, formal ontology, or knowledge organization structure, incorporating a model of some things in the world and/or some terms or expression and relations between them. "@en)
Declaration(Class(:VOCharacteristic))
SubClassOf(:VOCharacteristic ObjectAllValuesFrom(:boundsDomains :Scope))
Declaration(Class(:VOCharacterization))
AnnotationAssertion(rdfs:label :VOCharacterization "VOCharacterization"@en)
AnnotationAssertion(rdfs:comment :VOCharacterization "A Characterization of some aspect or aspects of a vocabulary or ontology, whether atomic or compound."@en)
Declaration(Class(:VOCharacterization-Atomic))
AnnotationAssertion(rdfs:label :VOCharacterization-Atomic "vocabulary or ontology characterization"@en)
AnnotationAssertion(rdfs:comment :VOCharacterization-Atomic "A description of a single, atomic characteristic, feature, or property of a specific vocabulary or ontology.  Although the characteristic is atomic (not meaningully broken down into independent, component characteristics), its formal expression may require more than one assertion. In other words, the characteristic may be atomic, but the characterization may comprise multiple statements. These statements may depend on each other for their meaningfulness in relation to the vocabulary or ontology, as, for example, in represention of a measurement of perfomance, according to some specified metric, obtained by performing some operations, using the vocabulary or ontology along with some reasoner or other application."@en)
SubClassOf(:VOCharacterization-Atomic :VOCharacterization)
Declaration(Class(:VOCharacterization-Compound))
AnnotationAssertion(rdfs:comment :VOCharacterization-Compound "A description of a specific vocabulary or ontology that includes multiple, independent characteristics, features, or properties of that vocabulary or ontology.  "@en)
SubClassOf(:VOCharacterization-Compound :VOCharacterization)
Declaration(ObjectProperty(:boundsDomains))
Declaration(ObjectProperty(:builtUsing))
Declaration(ObjectProperty(:componentOf))
Declaration(ObjectProperty(:composedOf))
Declaration(ObjectProperty(:consistsOf))
Declaration(ObjectProperty(:defines))
Declaration(ObjectProperty(:delivers))
Declaration(ObjectProperty(:determinesSome))
Declaration(ObjectProperty(:drives))
Declaration(ObjectProperty(:evaluates))
Declaration(ObjectProperty(:exhibits))
Declaration(ObjectProperty(:expresses))
Declaration(ObjectProperty(:generatedByTool))
Declaration(ObjectProperty(:generates))
Declaration(ObjectProperty(:hasInterestIn))
Declaration(ObjectProperty(:hasStage))
Declaration(ObjectProperty(:hierarchicallyConnectedWithin))
Declaration(ObjectProperty(:impacts))
Declaration(ObjectProperty(:implements))
Declaration(ObjectProperty(:influences))
Declaration(ObjectProperty(:intendedFor))
Declaration(ObjectProperty(:intendedUse))
Declaration(ObjectProperty(:invokes))
Declaration(ObjectProperty(:limits))
Declaration(ObjectProperty(:manages))
Declaration(ObjectProperty(:manifestedBy))
Declaration(ObjectProperty(:measuredBy))
Declaration(ObjectProperty(:measures))
Declaration(ObjectProperty(:processPartOf))
Declaration(ObjectProperty(:providesVisibilityTo))
Declaration(ObjectProperty(:requires))
Declaration(ObjectProperty(:selectsASubsetOf))
Declaration(ObjectProperty(:shapes))
Declaration(ObjectProperty(:supports))
Declaration(ObjectProperty(:usedToDevelop))
Declaration(ObjectProperty(:user))
Declaration(ObjectProperty(:uses))
Declaration(ObjectProperty(:utilizes))
Declaration(ObjectProperty(:voCharacterization))
AnnotationAssertion(rdfs:comment :voCharacterization "Relates a vocabulary or ontology to a characterization of one or more aspects or characteristics of that vocabulary or ontology."@en)
AnnotationAssertion(rdfs:label :voCharacterization "vocabulary or ontology characterization"@en)
AnnotationAssertion(rdfs:label :voCharacterization "vocharacterization")
ObjectPropertyDomain(:voCharacterization :VO)
ObjectPropertyRange(:voCharacterization :VOCharacterization)
Declaration(ObjectProperty(:voComponentOfSystem))
ObjectPropertyDomain(:voComponentOfSystem :VO)
Declaration(NamedIndividual(:CLIF))
AnnotationAssertion(rdfs:comment :CLIF "Common Logic Interchange Format")
ClassAssertion(:SerializationFormat :CLIF)
Declaration(NamedIndividual(:Cohesion))
Declaration(NamedIndividual(:CommonLogic))
ClassAssertion(:OntologyLanguage :CommonLogic)
Declaration(NamedIndividual(:Consistency))
Declaration(NamedIndividual(:FormalRelationsSupport))
Declaration(NamedIndividual(:Formalization))
Declaration(NamedIndividual(:InUse))
ClassAssertion(:MaturityLevel :InUse)
Declaration(NamedIndividual(:Microdata))
ClassAssertion(:SerializationFormat :Microdata)
Declaration(NamedIndividual(:OWL2))
Declaration(NamedIndividual(:OWL_XML))
ClassAssertion(:SerializationFormat :OWL_XML)
Declaration(NamedIndividual(:Proposed))
ClassAssertion(:MaturityLevel :Proposed)
Declaration(NamedIndividual(:RDFS))
AnnotationAssertion(rdfs:label :RDFS "RDF Schema")
Declaration(NamedIndividual(:RDF_XML))
ClassAssertion(:SerializationFormat :RDF_XML)
Declaration(NamedIndividual(:RDFa))
ClassAssertion(:SerializationFormat :RDFa)
Declaration(NamedIndividual(:Redundancy))
Declaration(NamedIndividual(:Tangledness))
Declaration(NamedIndividual(:Turtle))
AnnotationAssertion(rdfs:comment :Turtle "Terse RDF Triple Language")
ClassAssertion(:SerializationFormat :Turtle)
Declaration(NamedIndividual(:VOUsage))
ClassAssertion(:ApplicationType :VOUsage)
Declaration(NamedIndividual(:XCL))
AnnotationAssertion(rdfs:comment :XCL "XML representation for Common Logic")
ClassAssertion(:SerializationFormat :XCL)
Declaration(NamedIndividual(:XML_Schema))
ClassAssertion(:SerializationFormat :XML_Schema)
Declaration(AnnotationProperty(:alternateLabel))
SubAnnotationPropertyOf(:alternateLabel rdfs:label)
Declaration(AnnotationProperty(:conceptSourceNote))
AnnotationAssertion(rdfs:comment :conceptSourceNote "A note indicating the source from which the subject concept was derived, duplicated, extracted, or otherwise gotten. A conceptSourceNote is a minimal provenance capture. It may be replaced or supplemented by a more specific annotation or by an object property suitable for provenance tracing. "@en)
AnnotationAssertion(rdfs:label :conceptSourceNote "concept source note"@en)
AnnotationAssertion(:alternateLabel :conceptSourceNote "source note"@en)
Declaration(AnnotationProperty(:example))
AnnotationAssertion(rdfs:comment :example "A comment providing and example of the subject concept."@en)
AnnotationAssertion(rdfs:label :example "example"@en)
Declaration(AnnotationProperty(:mappingNote))
AnnotationAssertion(rdfs:comment :mappingNote "A mappingNote  captures that a specific external entity with which the subject concept should be aligned. It is not itself a mapping, but a workflowNote indicating that the mapping should be done. While the object entity is thought to be the one to which a connection should be made, the exact nature of the relationship is not specified. The work of making that determination, and the placement of the corresponding explicit assertions, is left to do at another time. "@en)
AnnotationAssertion(rdfs:label :mappingNote "mapping note"@en)
SubAnnotationPropertyOf(:mappingNote :workflowNote)
Declaration(AnnotationProperty(:synonym))
SubAnnotationPropertyOf(:synonym :alternateLabel)
Declaration(AnnotationProperty(:workflowNote))
AnnotationAssertion(rdfs:comment :workflowNote "A comment specifically intended to be used in developing, managing, and maintaining the ontology, often by doing something to modify the subject enitity.  A workflow note may capture a to-do item, for example."@en)
AnnotationAssertion(rdfs:label :workflowNote "workflow note"@en)
SubAnnotationPropertyOf(:workflowNote rdfs:comment)
Declaration(AnnotationProperty(skos:acronym))
SubAnnotationPropertyOf(skos:acronym :alternateLabel)
Declaration(AnnotationProperty(skos:editorialNote))
SubAnnotationPropertyOf(skos:editorialNote rdfs:comment)
)
